// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkManagmentSolution.EFCore;

#nullable disable

namespace WorkManagement.EFCore.Migrations
{
    [DbContext(typeof(WorkManagementDbContext))]
    [Migration("20241226130220_update-salary-info-table")]
    partial class updatesalaryinfotable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("EmployeeNumber")
                .StartsAt(1000L);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            RoleId = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5e174e-3b0e-446f-86af-483d56fd7210"),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2800e45a-293d-4c8e-8b91-2f57cce4b963"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("611c6e4c-c1fc-49a4-847e-fb9608f460c0"),
                            Name = "SuperUser",
                            NormalizedName = "SUPERUSER"
                        },
                        new
                        {
                            Id = new Guid("186d7b12-af9a-4956-a112-0795ac4d60e7"),
                            Name = "HR Admin",
                            NormalizedName = "HR ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f794ec58-bf79-4ca0-a897-021e0657ca42"),
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = new Guid("d48a7bcd-43f2-415f-b854-3392c9445e6f"),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortcuts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e445865-a24d-4543-a6c6-9443d048cdb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47587caa-ce71-4a77-b4e6-bedb9815a891",
                            Email = "admin1@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEKe+QzMz2doFXYFXNdP5np1Dinx6NAgoJx1AAgUNx6ih8zhwP7w25rYqQaarpqlTew==",
                            PhoneNumberConfirmed = false,
                            Shortcuts = "[]",
                            TwoFactorEnabled = false,
                            UserName = "admin1@admin.com"
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Full-Time"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Contractor"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Site"
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeDefaultLeaveSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeLeaveTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobLevelLeaveId")
                        .HasColumnType("int");

                    b.Property<int>("TotalLeaves")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeLeaveTypeId");

                    b.HasIndex("JobLevelLeaveId");

                    b.ToTable("EmployeeDefaultLeave");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeLeaveTypeId = 1,
                            IsDeleted = false,
                            TotalLeaves = 5
                        },
                        new
                        {
                            Id = 2,
                            EmployeeLeaveTypeId = 2,
                            IsDeleted = false,
                            TotalLeaves = 5
                        },
                        new
                        {
                            Id = 3,
                            EmployeeLeaveTypeId = 3,
                            IsDeleted = false,
                            TotalLeaves = 5
                        },
                        new
                        {
                            Id = 4,
                            EmployeeLeaveTypeId = 4,
                            IsDeleted = false,
                            TotalLeaves = 5
                        },
                        new
                        {
                            Id = 5,
                            EmployeeLeaveTypeId = 5,
                            IsDeleted = false,
                            TotalLeaves = 5
                        },
                        new
                        {
                            Id = 6,
                            EmployeeLeaveTypeId = 6,
                            IsDeleted = false,
                            TotalLeaves = 5
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFloater")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmployeeHolidays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = false,
                            Name = "New Year's Day",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = false,
                            Name = "Republic Day",
                            StartDate = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = true,
                            Name = "Holi",
                            StartDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = false,
                            Name = "Independence Day",
                            StartDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = false,
                            Name = "Dussehra",
                            StartDate = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = false,
                            Name = "Diwali",
                            StartDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsFloater = false,
                            Name = "Christmas",
                            StartDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeLeaveTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LeaveDays")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeLeaveTypeId");

                    b.ToTable("EmployeeLeaves");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeaveSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeLeaveTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("RemainingLeaves")
                        .HasColumnType("float");

                    b.Property<int>("TotalLeaves")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeLeaveTypeId");

                    b.ToTable("EmployeeLeaveSummary");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeLeaveType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsPaid = true,
                            Name = "Privilege Leave"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsPaid = true,
                            Name = "Sick Leave"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            IsPaid = true,
                            Name = "Casual Leave"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsPaid = true,
                            Name = "Maternity Leave"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            IsPaid = true,
                            Name = "Bereavement Leave"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            IsPaid = true,
                            Name = "Compensatory Leave"
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.JobLevelLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobLevelLeave");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            JobLevel = "Junior level"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            JobLevel = "Middle level"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            JobLevel = "Senior level"
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Basic")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ESI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpectedToBeSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Gratuity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HRAllowances")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsApprovedByDepartmentHead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsApprovedByHRHead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalaryStatus")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryType")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.PermissionAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionCategoryId");

                    b.ToTable("PermissionActions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Employee Module view",
                            Name = "EmployeeModule_View",
                            PermissionCategoryId = 2,
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Employee Module Add",
                            Name = "EmployeeModule_Add",
                            PermissionCategoryId = 2,
                            Value = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "Employee Module Delete",
                            Name = "EmployeeModule_Delete",
                            PermissionCategoryId = 2,
                            Value = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Employee Module Edit",
                            Name = "EmployeeModule_Edit",
                            PermissionCategoryId = 2,
                            Value = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Project Module view",
                            Name = "ProjectModule_View",
                            PermissionCategoryId = 1,
                            Value = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Project Module Add",
                            Name = "ProjectModule_Add",
                            PermissionCategoryId = 1,
                            Value = 7
                        },
                        new
                        {
                            Id = 7,
                            Description = "Project Module Delete",
                            Name = "ProjectModule_Delete",
                            PermissionCategoryId = 1,
                            Value = 8
                        },
                        new
                        {
                            Id = 8,
                            Description = "Project Module Edit",
                            Name = "ProjectModule_Edit",
                            PermissionCategoryId = 1,
                            Value = 6
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.PermissionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PermissionCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Project Module",
                            Name = "ProjectModule",
                            Value = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Employee Module",
                            Name = "EmployeeModule",
                            Value = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Integration Module",
                            Name = "IntegrationModule",
                            Value = 3
                        });
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PeriodOfWorkInMonths")
                        .HasColumnType("int");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("WorkOrderAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("WorkOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkOrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ProjectEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployees");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedEmployees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CompletedHours")
                        .HasColumnType("float");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("EstimatedHours")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double?>("RemainingHours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ProjectWorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<int?>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkOrderDocuments");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionActionId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionActionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AlternateNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeAddressesId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeDesignationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeIdentityInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeInsuranceDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR EmployeeNumber");

                    b.Property<int?>("EmployeePersonalDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeReportToId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeWorkInformationId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeAddressesId");

                    b.HasIndex("EmployeeCategoryId");

                    b.HasIndex("EmployeeDepartmentId");

                    b.HasIndex("EmployeeDesignationId");

                    b.HasIndex("EmployeeIdentityInfoId");

                    b.HasIndex("EmployeeInsuranceDetailsId");

                    b.HasIndex("EmployeePersonalDetailsId");

                    b.HasIndex("EmployeeReportToId");

                    b.HasIndex("EmployeeWorkInformationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MailingAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MailingAddressPinCode")
                        .HasColumnType("bigint");

                    b.Property<string>("MailingCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserAddressPinCode")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeDepartments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Enginnering"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Site"
                        });
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeDesignation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeDesignations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Senior Manager"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Director"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Senior Director"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "HR Head"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Engineer"
                        });
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<int?>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeEducationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DegreeCertificateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("grade")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEducationDetails");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeIdentityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BiometricCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStateInsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IFSC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvidentFundNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeIdentityInfos");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeInsuranceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Age")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Comprehensive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeDesignationId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Risk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSIWider")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDesignationId");

                    b.ToTable("EmployeeInsuranceDetails");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeePersonalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int?>("RelationWithEmployee")
                        .HasColumnType("int");

                    b.Property<int?>("bloodGroup")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmployeePersonalDetails");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeRelationshipDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelationshipType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRelationshipDetails");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeWorkInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Basic")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Bond")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ESI")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GRPHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Gratuity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HRAllowances")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PreviousDateOfJoiningInGDR")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PreviousDateOfLeavingInGDR")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SalaryType")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPreviousExperience")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("UseDefaultLeaves")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("EmployeeWorkInformations");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagement.Domain.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeDefaultLeaveSummary", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeaveType", "EmployeeLeaveTypes")
                        .WithMany()
                        .HasForeignKey("EmployeeLeaveTypeId");

                    b.HasOne("WorkManagement.Domain.Entity.EmployeeLeaveTables.JobLevelLeave", "JobLevelLeaves")
                        .WithMany()
                        .HasForeignKey("JobLevelLeaveId");

                    b.Navigation("EmployeeLeaveTypes");

                    b.Navigation("JobLevelLeaves");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeave", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeaveType", "EmployeeLeaveTypes")
                        .WithMany()
                        .HasForeignKey("EmployeeLeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeLeaveTypes");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeaveSummary", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "Employee")
                        .WithMany("EmployeeLeaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagement.Domain.Entity.EmployeeLeaveTables.EmployeeLeaveType", "EmployeeLeaveTypes")
                        .WithMany()
                        .HasForeignKey("EmployeeLeaveTypeId");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeLeaveTypes");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.EmployeeSalary", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.PermissionAction", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.PermissionCategory", "PermissionCategory")
                        .WithMany("PermissionActions")
                        .HasForeignKey("PermissionCategoryId");

                    b.Navigation("PermissionCategory");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ProjectEmployee", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagement.Domain.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ProjectTask", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ProjectWorkOrders", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.RolePermission", b =>
                {
                    b.HasOne("WorkManagement.Domain.Entity.PermissionAction", "PermissionAction")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagement.Domain.Entity.ApplicationRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionAction");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.Employee", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.EmployeeAddress", "EmployeeAddresses")
                        .WithMany()
                        .HasForeignKey("EmployeeAddressesId");

                    b.HasOne("WorkManagement.Domain.Entity.EmployeeCategory", "EmployeeCategory")
                        .WithMany()
                        .HasForeignKey("EmployeeCategoryId");

                    b.HasOne("WorkManagementSolution.Employee.EmployeeDepartment", "EmployeeDepartment")
                        .WithMany()
                        .HasForeignKey("EmployeeDepartmentId");

                    b.HasOne("WorkManagementSolution.Employee.EmployeeDesignation", "EmployeeDesignation")
                        .WithMany()
                        .HasForeignKey("EmployeeDesignationId");

                    b.HasOne("WorkManagementSolution.Employee.EmployeeIdentityInfo", "EmployeeIdentityInfos")
                        .WithMany()
                        .HasForeignKey("EmployeeIdentityInfoId");

                    b.HasOne("WorkManagementSolution.Employee.EmployeeInsuranceDetail", "EmployeeInsuranceDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeInsuranceDetailsId");

                    b.HasOne("WorkManagementSolution.Employee.EmployeePersonalDetails", "EmployeePersonalDetails")
                        .WithMany()
                        .HasForeignKey("EmployeePersonalDetailsId");

                    b.HasOne("WorkManagementSolution.Employee.Employee", "EmployeeReportTo")
                        .WithMany()
                        .HasForeignKey("EmployeeReportToId");

                    b.HasOne("WorkManagementSolution.Employee.EmployeeWorkInformation", "EmployeeWorkInformation")
                        .WithMany()
                        .HasForeignKey("EmployeeWorkInformationId");

                    b.HasOne("WorkManagement.Domain.Entity.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkManagement.Domain.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");

                    b.Navigation("EmployeeAddresses");

                    b.Navigation("EmployeeCategory");

                    b.Navigation("EmployeeDepartment");

                    b.Navigation("EmployeeDesignation");

                    b.Navigation("EmployeeIdentityInfos");

                    b.Navigation("EmployeeInsuranceDetails");

                    b.Navigation("EmployeePersonalDetails");

                    b.Navigation("EmployeeReportTo");

                    b.Navigation("EmployeeWorkInformation");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeDocuments", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "Employee")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeEducationDetail", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "Employee")
                        .WithMany("EmployeeEducationDetail")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeInsuranceDetail", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.EmployeeDesignation", "EmployeeDesignation")
                        .WithMany()
                        .HasForeignKey("EmployeeDesignationId");

                    b.Navigation("EmployeeDesignation");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeRelationshipDetail", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Employee", "Employee")
                        .WithMany("EmployeeRelationshipDetails")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.EmployeeWorkInformation", b =>
                {
                    b.HasOne("WorkManagementSolution.Employee.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.ApplicationRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.PermissionAction", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("WorkManagement.Domain.Entity.PermissionCategory", b =>
                {
                    b.Navigation("PermissionActions");
                });

            modelBuilder.Entity("WorkManagementSolution.Employee.Employee", b =>
                {
                    b.Navigation("EmployeeDocuments");

                    b.Navigation("EmployeeEducationDetail");

                    b.Navigation("EmployeeLeaves");

                    b.Navigation("EmployeeRelationshipDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
